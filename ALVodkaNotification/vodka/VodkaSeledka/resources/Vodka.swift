//
//  Vodka.swift
//  ALVodka
//
//  Created by Lobanov Aleksey on 11.07.16.
//  Copyright (c) 2016 LAV. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class Vodka : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfCanvas1: UIImage?
        static var canvas1Targets: [AnyObject]?
    }

    //// Drawing Methods

    public class func drawCanvas1() {
        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(40.67, 0.69))
        bezierPath.addCurveToPoint(CGPointMake(38.19, 0.68), controlPoint1: CGPointMake(39.98, -0), controlPoint2: CGPointMake(38.88, -0.02))
        bezierPath.addLineToPoint(CGPointMake(19.11, 19.85))
        bezierPath.addLineToPoint(CGPointMake(11.85, 12.47))
        bezierPath.addCurveToPoint(CGPointMake(10.62, 11.95), controlPoint1: CGPointMake(11.53, 12.14), controlPoint2: CGPointMake(11.08, 11.96))
        bezierPath.addLineToPoint(CGPointMake(10.62, 11.95))
        bezierPath.addCurveToPoint(CGPointMake(9.38, 12.46), controlPoint1: CGPointMake(10.16, 11.95), controlPoint2: CGPointMake(9.71, 12.13))
        bezierPath.addLineToPoint(CGPointMake(0.52, 21.38))
        bezierPath.addCurveToPoint(CGPointMake(0, 22.63), controlPoint1: CGPointMake(0.19, 21.71), controlPoint2: CGPointMake(0.01, 22.16))
        bezierPath.addCurveToPoint(CGPointMake(0.51, 23.88), controlPoint1: CGPointMake(0, 23.1), controlPoint2: CGPointMake(0.18, 23.55))
        bezierPath.addLineToPoint(CGPointMake(17.83, 41.47))
        bezierPath.addCurveToPoint(CGPointMake(19.06, 42), controlPoint1: CGPointMake(18.15, 41.8), controlPoint2: CGPointMake(18.6, 41.99))
        bezierPath.addLineToPoint(CGPointMake(19.06, 42))
        bezierPath.addCurveToPoint(CGPointMake(20.3, 41.48), controlPoint1: CGPointMake(19.52, 42), controlPoint2: CGPointMake(19.97, 41.81))
        bezierPath.addLineToPoint(CGPointMake(49.48, 12.15))
        bezierPath.addCurveToPoint(CGPointMake(50, 10.9), controlPoint1: CGPointMake(49.81, 11.82), controlPoint2: CGPointMake(49.99, 11.37))
        bezierPath.addCurveToPoint(CGPointMake(49.49, 9.66), controlPoint1: CGPointMake(50, 10.43), controlPoint2: CGPointMake(49.82, 9.99))
        bezierPath.addLineToPoint(CGPointMake(40.67, 0.69))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPointMake(19.07, 37.72))
        bezierPath.addLineToPoint(CGPointMake(4.23, 22.64))
        bezierPath.addLineToPoint(CGPointMake(10.61, 16.22))
        bezierPath.addLineToPoint(CGPointMake(17.87, 23.6))
        bezierPath.addCurveToPoint(CGPointMake(19.1, 24.12), controlPoint1: CGPointMake(18.19, 23.93), controlPoint2: CGPointMake(18.64, 24.11))
        bezierPath.addCurveToPoint(CGPointMake(20.34, 23.61), controlPoint1: CGPointMake(19.56, 24.15), controlPoint2: CGPointMake(20.01, 23.94))
        bezierPath.addLineToPoint(CGPointMake(39.42, 4.43))
        bezierPath.addLineToPoint(CGPointMake(45.77, 10.88))
        bezierPath.addLineToPoint(CGPointMake(19.07, 37.72))
        bezierPath.closePath()
        bezierPath.miterLimit = 4;

        fillColor.setFill()
        bezierPath.fill()
    }

    //// Generated Images

    public class var imageOfCanvas1: UIImage {
        if Cache.imageOfCanvas1 != nil {
            return Cache.imageOfCanvas1!
        }

        UIGraphicsBeginImageContextWithOptions(CGSizeMake(50, 42), false, 0)
            Vodka.drawCanvas1()

        Cache.imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas1!
    }

    //// Customization Infrastructure

    @IBOutlet var canvas1Targets: [AnyObject]! {
        get { return Cache.canvas1Targets }
        set {
            Cache.canvas1Targets = newValue
            for target: AnyObject in newValue {
                target.setImage(Vodka.imageOfCanvas1)
            }
        }
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
